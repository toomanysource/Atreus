version: "3"
services:
  mysql:
    image: mysql/mysql-server:8.0.32
    container_name: mysql
    privileged: true
    restart: always
    ports:
      - "33069:3306"
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: toomanysource
      MYSQL_DATABASE: atreus
      MYSQL_ROOT_HOST: "%"
    volumes:
      - ../../_data/mysql/data:/var/lib/mysql:rw
    command: --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    networks:
      - atreus_net

  redis:
    image: redis:7.0.12
    container_name: redis
    privileged: true
    restart: always
    ports:
      - "16379:6379"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ../../_data/redis/data:/data:rw
    command: "redis-server --requirepass atreus  --appendonly yes"
    networks:
      - atreus_net

  minio:
    image: "minio/minio:latest"
    container_name: minio
    ports:
      - "19000:9000"
      - "19090:9090"
    environment:
      # 要超过八位字符
      - MINIO_ROOT_USER=toomanysource
      - MINIO_ROOT_PASSWORD=toomanysource
    command: server /data --console-address ":9090"
    volumes:
      - ../../_data/minio/data:/data:rw
    networks:
      - atreus_net

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8.2
    container_name: zookeeper
    restart: always
    user: root
    ports:
      - "12181:2181"
    volumes:
      - ../../_data/kafka/zookeeper:/bitnami/zookeeper:rw #持久化数据
    environment:
      - TZ=Asia/Shanghai
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - atreus_net

  kafka:
    image: docker.io/bitnami/kafka:3.5.1
    restart: always
    user: root
    container_name: kafka
    ports:
      - "19092:9092"
    volumes:
      - ../../_data/kafka:/bitnami/kafka:rw #持久化数据
    environment:
      - TZ=Asia/Shanghai
      # Listeners
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - atreus_net
    depends_on:
      - zookeeper

  user-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=user
    container_name: user-service
    privileged: true
    restart: always
    ports:
      - "18001:8001"
      - "19001:9001"
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started

  publish-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=publish
    container_name: publish-service
    privileged: true
    restart: always
    ports:
      - "18002:8002"
      - "19002:9002"
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started

  comment-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=comment
    container_name: comment-service
    privileged: true
    restart: always
    ports:
      - "18003:8003"
      - "19003:9003"
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started

  favorite-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=favorite
    container_name: favorite-service
    privileged: true
    restart: always
    ports:
      - "18004:8004"
      - "19004:9004"
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started

  relation-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=relation
    container_name: relation-service
    privileged: true
    restart: always
    ports:
      - "18005:8005"
      - "19005:9005"
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started

  message-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=message
    container_name: message-service
    privileged: true
    restart: always
    ports:
      - "18006:8006"
      - "19006:9006"
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started

networks:
  atreus_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/16