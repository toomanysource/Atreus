version: "3"
services:
  nginx:
    image: nginx:1.24.0
    container_name: nginx
    restart: always
    ports:
      - "32796:80"
    volumes:
      - "../../configs/nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "../../_data/nginx/logs:/var/log/nginx"
    networks:
      - atreus_net
    depends_on:
        user-service:
            condition: service_started
        publish-service:
            condition: service_started
        comment-service:
            condition: service_started
        favorite-service:
            condition: service_started
        relation-service:
            condition: service_started
        message-service:
            condition: service_started
  mysql:
    image: mysql/mysql-server:8.0.32
    container_name: mysql
    privileged: true
    restart: always
    ports:
      - "33069:3306"
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: toomanysource
      MYSQL_DATABASE: atreus
      MYSQL_ROOT_HOST: "%"
    volumes:
      - ../../_data/mysql/data:/var/lib/mysql:rw
    command: --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    healthcheck:
      test: ["CMD", "mysql", "-uroot", "-ptoomanysource"]
      interval: 5s
      retries: 3
    networks:
      - atreus_net

  redis:
    image: redis:7.0.12
    container_name: redis
    privileged: true
    restart: always
    ports:
      - "16379:6379"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ../../_data/redis/data:/data:rw
    command: "redis-server --requirepass atreus  --appendonly yes"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "atreus", "ping"]
      interval: 5s
      retries: 3
    networks:
      - atreus_net

  minio:
    image: "minio/minio:latest"
    container_name: minio
    ports:
      - "19000:9000"
      - "19090:9090"
    environment:
      # 要超过八位字符
      - MINIO_ROOT_USER=toomanysource
      - MINIO_ROOT_PASSWORD=toomanysource
    command: server /data --console-address ":9090"
    volumes:
      - ../../_data/minio/data:/data:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      retries: 3
    networks:
      - atreus_net
  kafka:
    image: docker.io/bitnami/kafka:3.5.1
    restart: always
    user: root
    container_name: kafka
    volumes:
      - ../../_data/kafka:/bitnami/kafka:rw #持久化数据
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_KRAFT_CLUSTER_ID=LelM2dIFQkiUFvXCEcqRWA
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      # broker.id，必须唯一
      - KAFKA_BROKER_ID=1
    healthcheck:
      test: ["CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--list", "--bootstrap-server=localhost:9092"]
      interval: 5s
      retries: 3
    networks:
      - atreus_net
  user-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=user
    container_name: user-service
    privileged: true
    restart: always
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  publish-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=publish
    container_name: publish-service
    privileged: true
    restart: always
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy

  comment-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=comment
    container_name: comment-service
    privileged: true
    restart: always
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  favorite-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=favorite
    container_name: favorite-service
    privileged: true
    restart: always
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  relation-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=relation
    container_name: relation-service
    privileged: true
    restart: always
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  message-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - SERVICE_NAME=message
    container_name: message-service
    privileged: true
    restart: always
    networks:
      - atreus_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

networks:
  atreus_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/16
