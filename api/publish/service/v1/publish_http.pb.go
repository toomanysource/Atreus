// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.0
// source: publish/service/v1/publish.proto

package v1

import (
	context "context"

	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPublishServiceFeedList = "/publish.service.v1.PublishService/FeedList"
const OperationPublishServiceGetPublishList = "/publish.service.v1.PublishService/GetPublishList"
const OperationPublishServicePublishAction = "/publish.service.v1.PublishService/PublishAction"

type PublishServiceHTTPServer interface {
	// FeedList 请求 Feed List
	FeedList(context.Context, *ListFeedRequest) (*ListFeedReply, error)
	// GetPublishList 获取用户投稿视频列表
	GetPublishList(context.Context, *PublishListRequest) (*PublishListReply, error)
	// PublishAction 用户上传视频
	PublishAction(context.Context, *PublishActionRequest) (*PublishActionReply, error)
}

func RegisterPublishServiceHTTPServer(s *http.Server, srv PublishServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/douyin/publish/list", _PublishService_GetPublishList0_HTTP_Handler(srv))
	r.POST("/douyin/publish/action", _PublishService_PublishAction0_HTTP_Handler(srv))
	r.GET("/douyin/feed", _PublishService_FeedList0_HTTP_Handler(srv))
}

func _PublishService_GetPublishList0_HTTP_Handler(srv PublishServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PublishListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPublishServiceGetPublishList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPublishList(ctx, req.(*PublishListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PublishListReply)
		return ctx.Result(200, reply)
	}
}

func _PublishService_PublishAction0_HTTP_Handler(srv PublishServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PublishActionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPublishServicePublishAction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PublishAction(ctx, req.(*PublishActionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PublishActionReply)
		return ctx.Result(200, reply)
	}
}

func _PublishService_FeedList0_HTTP_Handler(srv PublishServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeedRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPublishServiceFeedList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FeedList(ctx, req.(*ListFeedRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeedReply)
		return ctx.Result(200, reply)
	}
}

type PublishServiceHTTPClient interface {
	FeedList(ctx context.Context, req *ListFeedRequest, opts ...http.CallOption) (rsp *ListFeedReply, err error)
	GetPublishList(ctx context.Context, req *PublishListRequest, opts ...http.CallOption) (rsp *PublishListReply, err error)
	PublishAction(ctx context.Context, req *PublishActionRequest, opts ...http.CallOption) (rsp *PublishActionReply, err error)
}

type PublishServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPublishServiceHTTPClient(client *http.Client) PublishServiceHTTPClient {
	return &PublishServiceHTTPClientImpl{client}
}

func (c *PublishServiceHTTPClientImpl) FeedList(ctx context.Context, in *ListFeedRequest, opts ...http.CallOption) (*ListFeedReply, error) {
	var out ListFeedReply
	pattern := "/douyin/feed"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPublishServiceFeedList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PublishServiceHTTPClientImpl) GetPublishList(ctx context.Context, in *PublishListRequest, opts ...http.CallOption) (*PublishListReply, error) {
	var out PublishListReply
	pattern := "/douyin/publish/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPublishServiceGetPublishList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PublishServiceHTTPClientImpl) PublishAction(ctx context.Context, in *PublishActionRequest, opts ...http.CallOption) (*PublishActionReply, error) {
	var out PublishActionReply
	pattern := "/douyin/publish/action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPublishServicePublishAction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
